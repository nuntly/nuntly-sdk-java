// File generated from our OpenAPI spec by Stainless.

package com.nuntly.models.organizations.subscriptions

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.nuntly.core.jsonMapper
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class SubscriptionListResponseTest {

    @Test
    fun create() {
        val subscriptionListResponse =
            SubscriptionListResponse.builder()
                .cancelAt("cancel_at")
                .cancelAtPeriodEnd(true)
                .currentPeriodEnd("current_period_end")
                .currentPeriodStart("current_period_start")
                .orgId("org_id")
                .price(
                    SubscriptionListResponse.Price.builder()
                        .currency("currency")
                        .recurring(
                            SubscriptionListResponse.Price.Recurring.builder()
                                .interval(SubscriptionListResponse.Price.Recurring.Interval.DAY)
                                .intervalCount(0.0)
                                .build()
                        )
                        .unitAmount(0.0)
                        .build()
                )
                .status(SubscriptionListResponse.Status.ACTIVE)
                .type(SubscriptionListResponse.Type.PLAN)
                .addon(SubscriptionListResponse.Addon.DEDICATED_IPS)
                .plan(SubscriptionListResponse.Plan.FREE)
                .quota(
                    SubscriptionListResponse.Quota.builder()
                        .daily(
                            SubscriptionListResponse.Quota.Daily.builder()
                                .transacEmails(0.0)
                                .build()
                        )
                        .monthly(
                            SubscriptionListResponse.Quota.Monthly.builder()
                                .transacEmails(0.0)
                                .build()
                        )
                        .build()
                )
                .schedule(
                    SubscriptionListResponse.Schedule.builder()
                        .created("created")
                        .addPhase(
                            SubscriptionListResponse.Schedule.Phase.builder()
                                .price(
                                    SubscriptionListResponse.Schedule.Phase.Price.builder()
                                        .currency("currency")
                                        .recurring(
                                            SubscriptionListResponse.Schedule.Phase.Price.Recurring
                                                .builder()
                                                .interval(
                                                    SubscriptionListResponse.Schedule.Phase.Price
                                                        .Recurring
                                                        .Interval
                                                        .DAY
                                                )
                                                .intervalCount(0.0)
                                                .build()
                                        )
                                        .type(
                                            SubscriptionListResponse.Schedule.Phase.Price.Type.PLAN
                                        )
                                        .unitAmount(0.0)
                                        .plan(
                                            SubscriptionListResponse.Schedule.Phase.Price.Plan.FREE
                                        )
                                        .quota(
                                            SubscriptionListResponse.Schedule.Phase.Price.Quota
                                                .builder()
                                                .daily(
                                                    SubscriptionListResponse.Schedule.Phase.Price
                                                        .Quota
                                                        .Daily
                                                        .builder()
                                                        .transacEmails(0.0)
                                                        .build()
                                                )
                                                .monthly(
                                                    SubscriptionListResponse.Schedule.Phase.Price
                                                        .Quota
                                                        .Monthly
                                                        .builder()
                                                        .transacEmails(0.0)
                                                        .build()
                                                )
                                                .build()
                                        )
                                        .build()
                                )
                                .build()
                        )
                        .build()
                )
                .build()

        assertThat(subscriptionListResponse.cancelAt()).contains("cancel_at")
        assertThat(subscriptionListResponse.cancelAtPeriodEnd()).isEqualTo(true)
        assertThat(subscriptionListResponse.currentPeriodEnd()).isEqualTo("current_period_end")
        assertThat(subscriptionListResponse.currentPeriodStart()).isEqualTo("current_period_start")
        assertThat(subscriptionListResponse.orgId()).isEqualTo("org_id")
        assertThat(subscriptionListResponse.price())
            .isEqualTo(
                SubscriptionListResponse.Price.builder()
                    .currency("currency")
                    .recurring(
                        SubscriptionListResponse.Price.Recurring.builder()
                            .interval(SubscriptionListResponse.Price.Recurring.Interval.DAY)
                            .intervalCount(0.0)
                            .build()
                    )
                    .unitAmount(0.0)
                    .build()
            )
        assertThat(subscriptionListResponse.status())
            .isEqualTo(SubscriptionListResponse.Status.ACTIVE)
        assertThat(subscriptionListResponse.type()).isEqualTo(SubscriptionListResponse.Type.PLAN)
        assertThat(subscriptionListResponse.addon())
            .contains(SubscriptionListResponse.Addon.DEDICATED_IPS)
        assertThat(subscriptionListResponse.plan()).contains(SubscriptionListResponse.Plan.FREE)
        assertThat(subscriptionListResponse.quota())
            .contains(
                SubscriptionListResponse.Quota.builder()
                    .daily(
                        SubscriptionListResponse.Quota.Daily.builder().transacEmails(0.0).build()
                    )
                    .monthly(
                        SubscriptionListResponse.Quota.Monthly.builder().transacEmails(0.0).build()
                    )
                    .build()
            )
        assertThat(subscriptionListResponse.schedule())
            .contains(
                SubscriptionListResponse.Schedule.builder()
                    .created("created")
                    .addPhase(
                        SubscriptionListResponse.Schedule.Phase.builder()
                            .price(
                                SubscriptionListResponse.Schedule.Phase.Price.builder()
                                    .currency("currency")
                                    .recurring(
                                        SubscriptionListResponse.Schedule.Phase.Price.Recurring
                                            .builder()
                                            .interval(
                                                SubscriptionListResponse.Schedule.Phase.Price
                                                    .Recurring
                                                    .Interval
                                                    .DAY
                                            )
                                            .intervalCount(0.0)
                                            .build()
                                    )
                                    .type(SubscriptionListResponse.Schedule.Phase.Price.Type.PLAN)
                                    .unitAmount(0.0)
                                    .plan(SubscriptionListResponse.Schedule.Phase.Price.Plan.FREE)
                                    .quota(
                                        SubscriptionListResponse.Schedule.Phase.Price.Quota
                                            .builder()
                                            .daily(
                                                SubscriptionListResponse.Schedule.Phase.Price.Quota
                                                    .Daily
                                                    .builder()
                                                    .transacEmails(0.0)
                                                    .build()
                                            )
                                            .monthly(
                                                SubscriptionListResponse.Schedule.Phase.Price.Quota
                                                    .Monthly
                                                    .builder()
                                                    .transacEmails(0.0)
                                                    .build()
                                            )
                                            .build()
                                    )
                                    .build()
                            )
                            .build()
                    )
                    .build()
            )
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val subscriptionListResponse =
            SubscriptionListResponse.builder()
                .cancelAt("cancel_at")
                .cancelAtPeriodEnd(true)
                .currentPeriodEnd("current_period_end")
                .currentPeriodStart("current_period_start")
                .orgId("org_id")
                .price(
                    SubscriptionListResponse.Price.builder()
                        .currency("currency")
                        .recurring(
                            SubscriptionListResponse.Price.Recurring.builder()
                                .interval(SubscriptionListResponse.Price.Recurring.Interval.DAY)
                                .intervalCount(0.0)
                                .build()
                        )
                        .unitAmount(0.0)
                        .build()
                )
                .status(SubscriptionListResponse.Status.ACTIVE)
                .type(SubscriptionListResponse.Type.PLAN)
                .addon(SubscriptionListResponse.Addon.DEDICATED_IPS)
                .plan(SubscriptionListResponse.Plan.FREE)
                .quota(
                    SubscriptionListResponse.Quota.builder()
                        .daily(
                            SubscriptionListResponse.Quota.Daily.builder()
                                .transacEmails(0.0)
                                .build()
                        )
                        .monthly(
                            SubscriptionListResponse.Quota.Monthly.builder()
                                .transacEmails(0.0)
                                .build()
                        )
                        .build()
                )
                .schedule(
                    SubscriptionListResponse.Schedule.builder()
                        .created("created")
                        .addPhase(
                            SubscriptionListResponse.Schedule.Phase.builder()
                                .price(
                                    SubscriptionListResponse.Schedule.Phase.Price.builder()
                                        .currency("currency")
                                        .recurring(
                                            SubscriptionListResponse.Schedule.Phase.Price.Recurring
                                                .builder()
                                                .interval(
                                                    SubscriptionListResponse.Schedule.Phase.Price
                                                        .Recurring
                                                        .Interval
                                                        .DAY
                                                )
                                                .intervalCount(0.0)
                                                .build()
                                        )
                                        .type(
                                            SubscriptionListResponse.Schedule.Phase.Price.Type.PLAN
                                        )
                                        .unitAmount(0.0)
                                        .plan(
                                            SubscriptionListResponse.Schedule.Phase.Price.Plan.FREE
                                        )
                                        .quota(
                                            SubscriptionListResponse.Schedule.Phase.Price.Quota
                                                .builder()
                                                .daily(
                                                    SubscriptionListResponse.Schedule.Phase.Price
                                                        .Quota
                                                        .Daily
                                                        .builder()
                                                        .transacEmails(0.0)
                                                        .build()
                                                )
                                                .monthly(
                                                    SubscriptionListResponse.Schedule.Phase.Price
                                                        .Quota
                                                        .Monthly
                                                        .builder()
                                                        .transacEmails(0.0)
                                                        .build()
                                                )
                                                .build()
                                        )
                                        .build()
                                )
                                .build()
                        )
                        .build()
                )
                .build()

        val roundtrippedSubscriptionListResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(subscriptionListResponse),
                jacksonTypeRef<SubscriptionListResponse>(),
            )

        assertThat(roundtrippedSubscriptionListResponse).isEqualTo(subscriptionListResponse)
    }
}
