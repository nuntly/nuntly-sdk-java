// File generated from our OpenAPI spec by Stainless.

package com.nuntly.api.models.domains

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.nuntly.api.core.jsonMapper
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class DomainCreateResponseTest {

    @Test
    fun create() {
        val domainCreateResponse =
            DomainCreateResponse.builder()
                .id("dns_01jh8xggryggczvjv4xfff4rwn")
                .clickTracking(false)
                .createdAt(OffsetDateTime.parse("2025-01-10T20:11:55.038Z"))
                .kind(DomainCreateResponse.Kind.DOMAIN)
                .name("info.tomlinson.ai")
                .openTracking(false)
                .orgId("org_01jh6jk82zjq9deye73h0mzcaq")
                .region(DomainCreateResponse.Region.EU_WEST_1)
                .sendingRecords(
                    listOf(
                        DomainCreateResponse.SendingRecord.builder()
                            .fullname("nuntly012._domainkey.info.tomlinson.ai")
                            .group(DomainCreateResponse.SendingRecord.Group.DKIM)
                            .kind(DomainCreateResponse.SendingRecord.Kind.RECORD)
                            .name("nuntly012._domainkey.info")
                            .region(DomainCreateResponse.SendingRecord.Region.EU_WEST_1)
                            .status(DomainCreateResponse.SendingRecord.Status.BOOTSTRAPPING)
                            .statusAt("2025-01-10T20:11:55.038Z")
                            .ttl("Auto")
                            .type(DomainCreateResponse.SendingRecord.Type.TXT)
                            .value("p=MIIBIjAxxx")
                            .priority("priority")
                            .selector("nuntly012")
                            .build(),
                        DomainCreateResponse.SendingRecord.builder()
                            .fullname("nuntly012.info.tomlinson.ai")
                            .group(DomainCreateResponse.SendingRecord.Group.SPF)
                            .kind(DomainCreateResponse.SendingRecord.Kind.RECORD)
                            .name("nuntly012.info")
                            .region(DomainCreateResponse.SendingRecord.Region.EU_WEST_1)
                            .status(DomainCreateResponse.SendingRecord.Status.BOOTSTRAPPING)
                            .statusAt("2025-01-10T20:11:55.038Z")
                            .ttl("Auto")
                            .type(DomainCreateResponse.SendingRecord.Type.TXT)
                            .value("v=spf1 include:amazonses.com ~all")
                            .priority("priority")
                            .selector("selector")
                            .build(),
                        DomainCreateResponse.SendingRecord.builder()
                            .fullname("_dmarc.info.tomlinson.ai")
                            .group(DomainCreateResponse.SendingRecord.Group.DMARC)
                            .kind(DomainCreateResponse.SendingRecord.Kind.RECORD)
                            .name("_dmarc")
                            .region(DomainCreateResponse.SendingRecord.Region.EU_WEST_1)
                            .status(DomainCreateResponse.SendingRecord.Status.BOOTSTRAPPING)
                            .statusAt("2025-01-10T20:11:55.038Z")
                            .ttl("Auto")
                            .type(DomainCreateResponse.SendingRecord.Type.TXT)
                            .value("v=DMARC1; p=none;")
                            .priority("priority")
                            .selector("selector")
                            .build(),
                        DomainCreateResponse.SendingRecord.builder()
                            .fullname("nuntly012.info.tomlinson.ai")
                            .group(DomainCreateResponse.SendingRecord.Group.MX)
                            .kind(DomainCreateResponse.SendingRecord.Kind.RECORD)
                            .name("nuntly012.info")
                            .region(DomainCreateResponse.SendingRecord.Region.EU_WEST_1)
                            .status(DomainCreateResponse.SendingRecord.Status.BOOTSTRAPPING)
                            .statusAt("2025-01-10T20:11:55.038Z")
                            .ttl("Auto")
                            .type(DomainCreateResponse.SendingRecord.Type.MX)
                            .value("feedback-smtp.eu-west-1.amazonses.com")
                            .priority("10")
                            .selector("selector")
                            .build(),
                    )
                )
                .sendingStatus(DomainCreateResponse.SendingStatus.DISABLED)
                .status(DomainCreateResponse.Status.BOOTSTRAPPING)
                .statusAt("2025-01-10T20:11:55.038Z")
                .modifiedAt(OffsetDateTime.parse("2025-01-10T20:11:55.038Z"))
                .build()

        assertThat(domainCreateResponse.id()).isEqualTo("dns_01jh8xggryggczvjv4xfff4rwn")
        assertThat(domainCreateResponse.clickTracking()).isEqualTo(false)
        assertThat(domainCreateResponse.createdAt())
            .isEqualTo(OffsetDateTime.parse("2025-01-10T20:11:55.038Z"))
        assertThat(domainCreateResponse.kind()).isEqualTo(DomainCreateResponse.Kind.DOMAIN)
        assertThat(domainCreateResponse.name()).isEqualTo("info.tomlinson.ai")
        assertThat(domainCreateResponse.openTracking()).isEqualTo(false)
        assertThat(domainCreateResponse.orgId()).isEqualTo("org_01jh6jk82zjq9deye73h0mzcaq")
        assertThat(domainCreateResponse.region()).isEqualTo(DomainCreateResponse.Region.EU_WEST_1)
        assertThat(domainCreateResponse.sendingRecords())
            .containsExactly(
                DomainCreateResponse.SendingRecord.builder()
                    .fullname("nuntly012._domainkey.info.tomlinson.ai")
                    .group(DomainCreateResponse.SendingRecord.Group.DKIM)
                    .kind(DomainCreateResponse.SendingRecord.Kind.RECORD)
                    .name("nuntly012._domainkey.info")
                    .region(DomainCreateResponse.SendingRecord.Region.EU_WEST_1)
                    .status(DomainCreateResponse.SendingRecord.Status.BOOTSTRAPPING)
                    .statusAt("2025-01-10T20:11:55.038Z")
                    .ttl("Auto")
                    .type(DomainCreateResponse.SendingRecord.Type.TXT)
                    .value("p=MIIBIjAxxx")
                    .priority("priority")
                    .selector("nuntly012")
                    .build(),
                DomainCreateResponse.SendingRecord.builder()
                    .fullname("nuntly012.info.tomlinson.ai")
                    .group(DomainCreateResponse.SendingRecord.Group.SPF)
                    .kind(DomainCreateResponse.SendingRecord.Kind.RECORD)
                    .name("nuntly012.info")
                    .region(DomainCreateResponse.SendingRecord.Region.EU_WEST_1)
                    .status(DomainCreateResponse.SendingRecord.Status.BOOTSTRAPPING)
                    .statusAt("2025-01-10T20:11:55.038Z")
                    .ttl("Auto")
                    .type(DomainCreateResponse.SendingRecord.Type.TXT)
                    .value("v=spf1 include:amazonses.com ~all")
                    .priority("priority")
                    .selector("selector")
                    .build(),
                DomainCreateResponse.SendingRecord.builder()
                    .fullname("_dmarc.info.tomlinson.ai")
                    .group(DomainCreateResponse.SendingRecord.Group.DMARC)
                    .kind(DomainCreateResponse.SendingRecord.Kind.RECORD)
                    .name("_dmarc")
                    .region(DomainCreateResponse.SendingRecord.Region.EU_WEST_1)
                    .status(DomainCreateResponse.SendingRecord.Status.BOOTSTRAPPING)
                    .statusAt("2025-01-10T20:11:55.038Z")
                    .ttl("Auto")
                    .type(DomainCreateResponse.SendingRecord.Type.TXT)
                    .value("v=DMARC1; p=none;")
                    .priority("priority")
                    .selector("selector")
                    .build(),
                DomainCreateResponse.SendingRecord.builder()
                    .fullname("nuntly012.info.tomlinson.ai")
                    .group(DomainCreateResponse.SendingRecord.Group.MX)
                    .kind(DomainCreateResponse.SendingRecord.Kind.RECORD)
                    .name("nuntly012.info")
                    .region(DomainCreateResponse.SendingRecord.Region.EU_WEST_1)
                    .status(DomainCreateResponse.SendingRecord.Status.BOOTSTRAPPING)
                    .statusAt("2025-01-10T20:11:55.038Z")
                    .ttl("Auto")
                    .type(DomainCreateResponse.SendingRecord.Type.MX)
                    .value("feedback-smtp.eu-west-1.amazonses.com")
                    .priority("10")
                    .selector("selector")
                    .build(),
            )
        assertThat(domainCreateResponse.sendingStatus())
            .isEqualTo(DomainCreateResponse.SendingStatus.DISABLED)
        assertThat(domainCreateResponse.status())
            .isEqualTo(DomainCreateResponse.Status.BOOTSTRAPPING)
        assertThat(domainCreateResponse.statusAt()).isEqualTo("2025-01-10T20:11:55.038Z")
        assertThat(domainCreateResponse.modifiedAt())
            .contains(OffsetDateTime.parse("2025-01-10T20:11:55.038Z"))
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val domainCreateResponse =
            DomainCreateResponse.builder()
                .id("dns_01jh8xggryggczvjv4xfff4rwn")
                .clickTracking(false)
                .createdAt(OffsetDateTime.parse("2025-01-10T20:11:55.038Z"))
                .kind(DomainCreateResponse.Kind.DOMAIN)
                .name("info.tomlinson.ai")
                .openTracking(false)
                .orgId("org_01jh6jk82zjq9deye73h0mzcaq")
                .region(DomainCreateResponse.Region.EU_WEST_1)
                .sendingRecords(
                    listOf(
                        DomainCreateResponse.SendingRecord.builder()
                            .fullname("nuntly012._domainkey.info.tomlinson.ai")
                            .group(DomainCreateResponse.SendingRecord.Group.DKIM)
                            .kind(DomainCreateResponse.SendingRecord.Kind.RECORD)
                            .name("nuntly012._domainkey.info")
                            .region(DomainCreateResponse.SendingRecord.Region.EU_WEST_1)
                            .status(DomainCreateResponse.SendingRecord.Status.BOOTSTRAPPING)
                            .statusAt("2025-01-10T20:11:55.038Z")
                            .ttl("Auto")
                            .type(DomainCreateResponse.SendingRecord.Type.TXT)
                            .value("p=MIIBIjAxxx")
                            .priority("priority")
                            .selector("nuntly012")
                            .build(),
                        DomainCreateResponse.SendingRecord.builder()
                            .fullname("nuntly012.info.tomlinson.ai")
                            .group(DomainCreateResponse.SendingRecord.Group.SPF)
                            .kind(DomainCreateResponse.SendingRecord.Kind.RECORD)
                            .name("nuntly012.info")
                            .region(DomainCreateResponse.SendingRecord.Region.EU_WEST_1)
                            .status(DomainCreateResponse.SendingRecord.Status.BOOTSTRAPPING)
                            .statusAt("2025-01-10T20:11:55.038Z")
                            .ttl("Auto")
                            .type(DomainCreateResponse.SendingRecord.Type.TXT)
                            .value("v=spf1 include:amazonses.com ~all")
                            .priority("priority")
                            .selector("selector")
                            .build(),
                        DomainCreateResponse.SendingRecord.builder()
                            .fullname("_dmarc.info.tomlinson.ai")
                            .group(DomainCreateResponse.SendingRecord.Group.DMARC)
                            .kind(DomainCreateResponse.SendingRecord.Kind.RECORD)
                            .name("_dmarc")
                            .region(DomainCreateResponse.SendingRecord.Region.EU_WEST_1)
                            .status(DomainCreateResponse.SendingRecord.Status.BOOTSTRAPPING)
                            .statusAt("2025-01-10T20:11:55.038Z")
                            .ttl("Auto")
                            .type(DomainCreateResponse.SendingRecord.Type.TXT)
                            .value("v=DMARC1; p=none;")
                            .priority("priority")
                            .selector("selector")
                            .build(),
                        DomainCreateResponse.SendingRecord.builder()
                            .fullname("nuntly012.info.tomlinson.ai")
                            .group(DomainCreateResponse.SendingRecord.Group.MX)
                            .kind(DomainCreateResponse.SendingRecord.Kind.RECORD)
                            .name("nuntly012.info")
                            .region(DomainCreateResponse.SendingRecord.Region.EU_WEST_1)
                            .status(DomainCreateResponse.SendingRecord.Status.BOOTSTRAPPING)
                            .statusAt("2025-01-10T20:11:55.038Z")
                            .ttl("Auto")
                            .type(DomainCreateResponse.SendingRecord.Type.MX)
                            .value("feedback-smtp.eu-west-1.amazonses.com")
                            .priority("10")
                            .selector("selector")
                            .build(),
                    )
                )
                .sendingStatus(DomainCreateResponse.SendingStatus.DISABLED)
                .status(DomainCreateResponse.Status.BOOTSTRAPPING)
                .statusAt("2025-01-10T20:11:55.038Z")
                .modifiedAt(OffsetDateTime.parse("2025-01-10T20:11:55.038Z"))
                .build()

        val roundtrippedDomainCreateResponse =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(domainCreateResponse),
                jacksonTypeRef<DomainCreateResponse>(),
            )

        assertThat(roundtrippedDomainCreateResponse).isEqualTo(domainCreateResponse)
    }
}
